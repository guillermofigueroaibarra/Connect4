import java.util.Scanner;

public class Connect4GUI {
    private static final int rows = 6;
    private static final int columns = 7;
    private static final char empty = ' ';
    private static final char player1Piece = 'X';
    private static final char player2Piece = 'O';

    private char[][] board;
    private boolean player1Turn;

    public Connect4GUI() {
        board = new char[rows][columns];
        player1Turn = true;
        initializeBoard();
    }

    private void initializeBoard() {
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < columns; col++) {
                board[row][col] = empty;
            }
        }
    }

    public void printBoard() {
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < columns; col++) {
                System.out.print("[" + board[row][col] + "]");
            }
            System.out.println();
        }
        for (int col = 0; col < columns; col++) {
            System.out.print("---");
        }
        System.out.println();
        for (int col = 0; col < columns; col++) {
            System.out.print(" " + col + " " );
        }
        System.out.println();
    }

    public boolean dropPiece(int col) {
        if (col < 0 || col >= columns) {
            System.out.println("Invalid column number. Please choose a column between 0 and " + (columns - 1) + ".");
            return false;
        }
        for (int row = rows - 1; row >= 0; row--) {
            if (board[row][col] == empty) {
                board[row][col] = player1Turn ? player1Piece : player2Piece;
                return true;
            }
        }
        System.out.println("Column is full. Please choose another column.");
        return false;
    }

    // After the piece is dropped, it will check in all directions for 3 more consecutive pieces
    public boolean checkWinner() {
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < columns; col++) {
                char piece = board[row][col];
                if (piece != empty) {
                    // Check horizontally (left and right)
                    if (col + 3 < columns &&
                            piece == board[row][col + 1] &&
                            piece == board[row][col + 2] &&
                            piece == board[row][col + 3]) {
                        return true;
                    }
                    // Check vertically (up and down)
                    if (row + 3 < rows &&
                            piece == board[row + 1][col] &&
                            piece == board[row + 2][col] &&
                            piece == board[row + 3][col]) {
                        return true;
                    }
                    // Check diagonally (positive slope)
                    if (row + 3 < rows && col + 3 < columns &&
                            piece == board[row + 1][col + 1] &&
                            piece == board[row + 2][col + 2] &&
                            piece == board[row + 3][col + 3]) {
                        return true;
                    }
                    // Check diagonally (negative slope)
                    if (row - 3 >= 0 && col + 3 < columns &&
                            piece == board[row - 1][col + 1] &&
                            piece == board[row - 2][col + 2] &&
                            piece == board[row - 3][col + 3]) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public void play() {
        Scanner scanner = new Scanner(System.in);
        boolean gameRunning = true;

        while (gameRunning) {
            printBoard();

            int col;
            do {
                System.out.print("Player " + (player1Turn ? "1" : "2") + ", enter column: ");
                col = scanner.nextInt();
            } while (!dropPiece(col));

            if (checkWinner()) {
                printBoard();
                System.out.println("Player " + (player1Turn ? "1" : "2") + " wins!");
                gameRunning = false;
            } else if (isBoardFull()) {
                printBoard();
                System.out.println("It's a tie!");
                gameRunning = false;
            } else {
                player1Turn = !player1Turn;
            }
        }
    }

    private boolean isBoardFull() {
        for (int col = 0; col < columns; col++) {
            if (board[0][col] == empty) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Connect4GUI game = new Connect4GUI();
        game.play();
    }
}
